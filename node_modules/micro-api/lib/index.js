'use strict';

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var createRouter = require('uniloc');
var uuid = require('uuid');

var _require = require('micro'),
    json = _require.json,
    send = _require.send;

require('babel-polyfill');

var debug = function debug(message) {
  if (process.env.NODE_ENV === 'development') {
    console.error(message);
  }
};

var sendPageNotFound = function sendPageNotFound(req, res) {
  var message = req.method + ' ' + req.url + ' not found';
  debug(message);
  return send(res, 404, { message: message });
};

var microApi = function microApi(routeConfigs) {
  var routes = {};
  var handlers = {};

  routeConfigs.forEach(function (routeConfig) {
    var id = uuid();
    var method = routeConfig.method.toUpperCase();
    routes = Object.assign(routes, _defineProperty({}, id, method + ' ' + routeConfig.path));

    handlers = Object.assign(handlers, _defineProperty({}, id, routeConfig.handler));
  });

  var router = createRouter(routes);

  return function () {
    var _ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee(req, res) {
      var route, handler, reqBody, resBody, message, stack, statusCode, code;
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              route = router.lookup(req.url, req.method);
              handler = handlers[route.name];

              if (handler) {
                _context.next = 4;
                break;
              }

              return _context.abrupt('return', sendPageNotFound(req, res));

            case 4:
              _context.prev = 4;
              reqBody = void 0;
              _context.prev = 6;
              _context.next = 9;
              return json(req);

            case 9:
              reqBody = _context.sent;
              _context.next = 15;
              break;

            case 12:
              _context.prev = 12;
              _context.t0 = _context['catch'](6);

              reqBody = {};

            case 15:
              _context.next = 17;
              return handler({
                res: res,
                req: req,
                body: reqBody,
                params: route.options,
                headers: req.headers
              });

            case 17:
              resBody = _context.sent;


              // If there's a response return it
              if (resBody) {
                send(res, 200, resBody);
                // If there's no response treat it as missing
              } else {
                sendPageNotFound(req, res);
              }
              _context.next = 27;
              break;

            case 21:
              _context.prev = 21;
              _context.t1 = _context['catch'](4);
              message = _context.t1.message, stack = _context.t1.stack, statusCode = _context.t1.statusCode;
              code = statusCode || 500;

              debug(_context.t1);
              send(res, code, { message: message, stack: stack, code: code });

            case 27:
            case 'end':
              return _context.stop();
          }
        }
      }, _callee, undefined, [[4, 21], [6, 12]]);
    }));

    return function (_x, _x2) {
      return _ref.apply(this, arguments);
    };
  }();
};

module.exports = microApi;